Questão 1:

O principais problemas foram encontrados entre as linhas 243 e 249 que possuíam o código abaixo:

    for (int i=height-1; i>=0; i--){
        for (int j=0; j<width; j++){
            bitmapfile[k++] = (byte)raster[i][j][0];
            bitmapfile[k++] = (byte)raster[i][j][1];
            bitmapfile[k++] = (byte)raster[i][j][2];

        }
    }

Como podemos ver o laço externo estava iterando "ao contrário", ou seja, ao invés de ir de 0 à altura da imagem, ele começa no valor máximo da altura da imagem e tendia ao zero, fazendo com que a imagem ficasse invertida, pois no formato bitmap e imagem é representada no sentido de cima para baixo, da esquerda para direita. O outro erro foi a atribuição dos valores de RGB, que no arquivo bitmap eles são escritos na ordem BGR e estava sendo passado como RGB, isso fazia com que os canais de cores azul e vermelho fossem trocados, para corrigir isto apenas foram trocadas as linhas 245 e 247. Os erros corrigidos são apresentados abaixo:

    for (int i=0; i<height; i++){
        for (int j=0; j<width; j++){
            bitmapfile[k++] = (byte)raster[i][j][2];
            bitmapfile[k++] = (byte)raster[i][j][1];
            bitmapfile[k++] = (byte)raster[i][j][0];
        }
    }


Questão 2:

Não há perda de dados, pois o cuif(CUI.1) guarda todos os valores de todos os canais de cores, sem realizar compactação e sem perder nenhuma informação sobre os canais de cores da imagem.

Questão 3:

Para preservar apenas um dos canais de cores, uma possibilidade é zerar os valores referentes ao outros canais. Para fazer isso no cuif basta alterarmos o método readRGB() da classe Cuif trocando o E(AND) lógico realiza com 0xFF por um E(AND) lógico com 0x00 nos canais que não se deseja manter. O método alterado ficaria assim:

private void readRGB(int[][][] rasterbmp, int offset) {
    int r, g, b; 
    raster=new int[height][width][3];
    for (int i=0; i<height; i++){
        for (int j=0; j<width; j++){
            r = rasterbmp[i][j][0];
            cuiffile[offset++] = (byte)(r&0xff);
            raster[i][j][0] = r;
        }
    }
    for (int i=0; i<height; i++){
        for (int j=0; j<width; j++){
            g = rasterbmp[i][j][1]; 
            cuiffile[offset++] = (byte)(g&0x00);
            raster[i][j][1] = g;
        }
    }
    for (int i=0; i<height; i++){
        for (int j=0; j<width; j++){
            b = rasterbmp[i][j][2]; 
            cuiffile[offset++] = (byte)(b&0x00);
            raster[i][j][2] = b;
        }
    }

}